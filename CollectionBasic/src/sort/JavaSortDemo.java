package sort;


/**
 * java 8中排序
 *
 */
public class JavaSortDemo {

    /**
     *
     * 插入排序
     * 第一次：[4],5,1,2,8,6,7,3,10,9
     * 第二次：[4,5],1,2,8,6,7,3,10,9
     * 第三次：[1,4,5],2,8,6,7,3,10,9
     * 第四次：[1,2,4,5],8,6,7,3,10,9
     * 第五次：[1,2,4,5,8],6,7,3,10,9
     * 第六次：[1,2,4,5,6,8],7,3,10,9
     * 第七次：[1,2,4,5,6,7,8],3,10,9
     * 第八次：[1,2,3,4,5,6,7,8],10,9
     * 第九次：[1,2,3,4,5,6,7,8,10],9
     * 第十次：[1,2,3,4,5,6,7,8,9,10]
     * 算法分析
     * 直接插入排序算法的空间复杂度为O(1)。
     * 最好的情况，要比较的无序序列原本就是顺序有序的，那么要比较的次数是n-1，移动了0次，时间复杂度O(n)。
     * 最坏的情况，要比较的无序序列原本就是逆序有序的，那么要比较的次数是(n+2)(n-1)/2，移动的次数(n+4)(n-1)/2，时间复杂度O(n²)。
     * 直接插入排序的平均复杂度为O(n²)。
     * 直接插入排序是稳定的。
     *
     * @param data
     */
    public static void insertSort(int[] data){
        int temp;
        for (int i=0; i<data.length; i++){
            temp = data[i];
            int j;
            for (j = i-1; j >=0; j--){
                if (data[j] > temp){        //判断已经完成排序的区域里面的最后一个值是否大于当前目标
                    data[j+1] = data[j];    //大于就将数据后移一位
                } else {
                    break;                  //不大于就直接结束循环，因为这个数据是已排序区域的最大值
                }
            }
            data[j+1] = temp;               //将最后得到的插入位置插入当前值
        }
    }


    /**
     * 希尔排序
     *
     * 基本思想
     *     希尔排序严格来说是基于插入排序的思想，又被称为缩小增量排序。
     * 　　   具体流程如下：
     * 　　   1、将包含n个元素的数组，分成n/2个数组序列，第一个数据和第n/2+1个数据为一对...
     * 　　   2、对每对数据进行比较和交换，排好顺序；
     * 　　   3、然后分成n/4个数组序列，再次排序；
     * 　　   4、不断重复以上过程，随着序列减少并直至为1，排序完成。
     *     假如有初始数据：25  11 45  26  12  78。
     * 　　   1、第一轮排序，将该数组分成 6/2=3 个数组序列，第1个数据和第4个数据为一对，第2个数据和第5个数据为一对，第3个数据和第6个数据为一对，每对数据进行比较排序，排序后顺序为：[25, 11, 45, 26,12, 78]。
     * 　　   2、第二轮排序，将上轮排序后的数组分成6/4=1个数组序列，此时逐个对数据比较，按照插入排序对该数组进行排序，排序后的顺序为：[11, 12, 25, 26, 45, 78]。
     * 算法分析
     *     对于插入排序而言，如果原数组是基本有序的，那排序效率就可大大提高。另外，对于数量较小的序列使用直接插入排序，会因需要移动的数据量少，其效率也会提高。因此，希尔排序具有较高的执行效率。
     * 　　希尔排序并不稳定，O(1)的额外空间，时间复杂度为O(n²)。
     *
     * @param data
     */
    public static void shellSort(int[] data){
        int j = 0;
        int temp = 0;
        for (int increment = data.length / 2; increment > 0; increment /= 2){
            for (int i = increment; i < data.length; i++) {
                temp = data[i];
                System.out.println("--------------外层循环-------------j:"+j+"---i:"+i+"--increment:"+increment);
                for (j = i - increment; j >= 0; j -= increment) {
                System.out.println("--------------内存层循环-----------j:"+j+"---i:"+i+"--increment:"+increment);
                    if (temp < data[j]) {
                        data[j + increment] =data[j];
                    } else {
                        break;
                    }
                }
                data[j + increment] = temp;
            }
        }
    }

    /**
     * 简单选择排序
     * 基本思想
     *      选择排序是一种简单直观的排序算法，其基本原理如下：对于给定的一组记录，经过第一轮比较后得到最小的记录，然后将该记录的位置与第一个记录的位置交换；接着对不包括第一个记录以外的其他记录进行第二次比较，
     *      得到最小记录并与第二个位置记录交换；重复该过程，知道进行比较的记录只剩下一个为止。
     * 算法分析
     *      时间复杂度:假设有n个数据，数据交换的次数最多为n-1次，但程序的总体的比较次数较多。所以综合考虑有直接选择排序的时间复杂度为O(n2)(n的平方)。所以当记录占用字节数较多时，通常比直接插入排序的执行速度快些。
     *      空间复杂度:直接选择排序的空间复杂度很好，它只需要一个附加单元用于数据交换，所以其空间复杂度为O(1)。
     *      稳定性:由于在直接选择排序中存在着不相邻元素之间的互换，因此，直接选择排序是一种不稳定的排序方法。以数组{49,38,65,97,76,13,27,49}为例，
     *      第一次：13[49,38,65,97,76,27,49]
     *      第二次：13,27[49,38,65,97,76,49]
     *      第三次：13,27,38[49,65,97,76,49]
     *      第四次：13,27,38,49[65,97,76,49]
     *      第五次：13,27,38,49,49[65,97,76]
     *      第六次：13,27,38,49,49,65[97,76]
     *      第七次：13,27,38,49,49,65,76[97]
     *      最终排序结果：
     *      13,27,38,49,49,65,76,97
     *
     * @param data
     */
    public static void sampleSelectSort(int[] data){
        for (int i = 0; i < data.length; i++) {
            int temp = data[i];
            int flag = i; //将当前下标定义为最小值下标
            for (int j = i + 1; j < data.length; j++) {
                if (data[j] < temp) { //a[j] < temp 从小到大排序；a[j] >temp 从大到小排序
                    temp = data[j];
                    flag = j; //如果有小于当前最小值的关键字将此关键字的下标赋值给flag
                }
            }
            if (flag != i) {
                data[flag] = data[i];
                data[i] = temp;
            }
        }
    }

    /**
     * 冒泡排序
     * 冒泡排序的时间复杂度为O(n^2),空间复杂度为O(1),它是一种稳定的排序算法，冒泡排序的最坏时间复杂度为：O(n2) 。
     * @param data
     */
    public static void bubbleSort(int[] data){
        int j , k;
        int flag = data.length ;//flag来记录最后交换的位置，也就是排序的尾边界
        while (flag > 0){//排序未结束标志
            k = flag; //k 来记录遍历的尾边界
            flag = 0;
            for(j=1; j<k; j++){
                if(data[j-1] > data[j]){//前面的数字大于后面的数字就交换
                    //交换a[j-1]和a[j]
                    int temp;
                    temp = data[j-1];
                    data[j-1] = data[j];
                    data[j]=temp;
                    //表示交换过数据
                    flag = j;//记录最新的尾边界
                }
            }
        }
    }

    /**
     * 快速排序
     * 快速排序是一种非常高效的排序算法，
     * 它的实现，增大了记录的比较和移动的距离，将关键字较大的记录从前面直接移动到后面，关键字较小的记录从后面直接移动到前面，
     * 从而减少了总的比较次数和移动次数。同时采用“分而治之”的思想，把大的拆分为小的，小的拆分为更小的。
     * 其原理如下：
     *      对于给定的一组记录，选择一个基准元素,通常选择第一个元素或者最后一个元素,
     *      通过一趟扫描，将待排序列分成两部分, 一部分比基准元素小,一部分大于等于基准元素,
     *      此时基准元素在其排好序后的正确位置, 然后再用同样的方法递归地排序划分的两部分，直到序列中的所有记录均有序为止。
     *
     * 执行结果顺序:
     *   排序循环1：
     *      [49,38,65,97,76,13,27,51]
     *      [27,38,65,97,76,13,27(49),51]
     *      [27,38,65(49),97,76,13,65,51]
     *   排序循环2：
     *      [27,38,65(49),97,76,13,65,51]
     *      [27,38,13,97,76,13(49),65,51]
     *      [27,38,13,97,76,97(49),65,51]
     *   排序循环3：
     *      [27,38,13,97,76,97(49),65,51]
     *   排序循环4：
     *      [27,38,13],49,[76,97,65,51]
     *      [13,38,13(27)],49,[76,97,65,51]
     *      [13,38(27),38],49,[76,97,65,51]
     *   排序循环5：
     *      [13,38(27),38],49,[76,97,65,51]
     *   排序循环6：
     *      [13,27,38,49,[76,97,65,51]
     *      [13,27,38,49,[51,97,65,51(76)]
     *      [13,27,38,49,[51,97(76),65,97]
     *   排序循环7：
     *      [13,27,38,49,[51,97(76),65,97]
     *      [13,27,38,49,[51,65,65(76),97]
     *   最后排序结果：
     *      [13,27,38,49,51,65,76,97]
     *
     *
     *
     * @param args
     * @param left
     * @param right
     */
    public static void qucikSort(int[] args, int left, int right){
        if (left > right){
            return;
        }
        int i = left;
        int j = right;
        int iBase = args[i]; //用子表的第一个记录做基准
        while (i<j){ //从数组的两端交替像中间扫描
            System.out.println("---");
            printArr(args);
            while (i<j && args[j]>=iBase){
                j--;
            }
            if (i < j){
                args[i++] = args[j]; //用比基准小的记录替换低位记录 i++是在下面的循环跳过替换值
                printArr(args);
//                System.out.println("+++");
            }
            while (i<j && args[i]<=iBase){
                i++;
            }
            if (i < j){
                args[j--] = args[i];
                printArr(args);
//                System.out.println("===");
            }
        }
        args[i] = iBase;
        qucikSort(args, left, i-1);
        qucikSort(args, i+1, right);
    }

    public static void printArr(int[] args){
        for (int i=0; i<args.length; i++){
            System.out.print(args[i]+",");
        }
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println();
    }

    public static void main(String[] args) {
        int[] data = new int[]{49,38,65,97,76,13,27,51};
//        shellSort(data);
        qucikSort(data, 0, data.length-1);
    }

}
